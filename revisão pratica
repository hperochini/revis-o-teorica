1- O que é orientação a objetos e quais são seus princípios fundamentais?

A orientação a objetos é um paradigma de programação que organiza o software em unidades chamadas "objetos", que representam
entidades do mundo real. Cada objeto possui características (conhecidas como atributos) e comportamentos (conhecidos como métodos) associados a ele. Os principios fundamentais são: 
1: Abstração, 
2: Herança,
3: Polimorfismo
4: Encapsulamento.


2-Quais são as vantagens da orientação a objetos em comparação com paradigmas de programação procedural?

As vantagens são:
1-Reutilização de Código
2-Modularidade
3-Facilidade de Manutenção
4-Flexibilidade
5-Organização do Código
6-Facilidade de Teste
Em resumo, a POO oferece uma abordagem estruturada para criar códigos reutilizáveis,
sistemas mais fáceis de manter e entender, e uma representação mais próxima da realidade.

3- Explique o conceito de encapsulamento e como ele é implementado em linguagens de programação orientadas a objetos.

O encapsulamento é um dos conceitos fundamentais da programação orientada a objetos (POO). 
Ele envolve o agrupamento de dados (atributos) e métodos (funções) que operam nesses dados em uma única unidade chamada de classe. 
O objetivo principal do encapsulamento é esconder o estado interno de um objeto e restringir o acesso direto aos seus dados, 
permitindo que apenas os métodos da classe manipulem esses dados de forma controlada.
Em termos de implementação, o encapsulamento é alcançado através da definição de modificadores de acesso nos atributos e métodos de uma classe. Os três principais modificadores de acesso comumente encontrados em linguagens de programação orientadas a objetos são:

>  Public: Acesso irrestrito a membros da classe a partir de qualquer lugar no código.
>  Private: Restringe o acesso aos membros da classe apenas aos próprios métodos da classe. Nenhuma outra classe ou parte do código pode acessar diretamente esses membros.
>  Protected: Permite o acesso aos membros da classe por outras classes que sejam subclasse (herança), mas não permite acesso por partes do código que não sejam subclasse.



4- Explique o conceito de classe e objeto em programação orientada a objetos, e como eles estão relacionados.

Uma classe é um modelo ou plano para criar objetos. Ela define atributos (características) e métodos (ações) que os objetos desse tipo podem ter. 
Um objeto é uma instância de uma classe - uma entidade concreta criada a partir do modelo da classe, 
com seus próprios valores para os atributos.
Resumindo, uma classe é como um molde e um objeto é uma instância desse molde.

5- Qual é a importância dos construtores e métodos em uma classe em programação orientada a objetos?

Os construtores são métodos especiais em uma classe que são chamados automaticamente quando um objeto é criado. Eles inicializam o estado inicial do objeto, atribuindo valores aos seus atributos. 
Os métodos, por outro lado, são funções definidas dentro da classe que permitem que os objetos realizem ações específicas ou executem operações em seus dados. 
Eles encapsulam o comportamento do objeto e promovem a reutilização de código. 
Construtores e métodos são fundamentais na programação orientada a objetos, pois ajudam a criar e manipular objetos de forma eficiente e organizada.

6- Quais são as diferenças entre métodos estáticos e métodos de instância em uma classe?

Métodos estáticos e métodos de instância diferem em como são chamados e em seu comportamento em relação aos objetos.
Métodos de Instância:
Pertencem a uma instância específica da classe.
Eles têm acesso aos atributos e outros métodos da instância através do uso do self (ou equivalente em outras linguagens).
São chamados em uma instância específica e operam nos dados dessa instância.
Métodos Estáticos:
Pertencem à classe em si, não a uma instância específica.
Não têm acesso direto aos atributos ou outros métodos da instância.
São chamados na classe em vez de em uma instância e geralmente são usados para funcionalidades que não dependem do estado da instância.
Métodos de instância operam em instâncias específicas e podem acessar e manipular seus dados, enquanto métodos estáticos são independentes de instâncias e operam apenas com base nos argumentos fornecidos.

7- Como são tratados os conceitos de acoplamento e coesão na orientação a objetos e por que são importantes?

Na orientação a objetos, acoplamento refere-se à dependência entre partes do código, enquanto coesão indica o grau de relacionamento entre os elementos dentro de uma classe. 
Reduzir o acoplamento e aumentar a coesão é importante para tornar o código mais flexível, fácil de entender e manter, permitindo que as partes do sistema possam ser alteradas de forma independente
e favorecendo a reutilização de código.

8- Qual é o objetivo do metodo main ?

O método main é o ponto de entrada para a execução de um programa Java. Ele é o primeiro método chamado quando o programa é iniciado e é onde a execução começa.
O objetivo principal do método main é iniciar a execução do programa, podendo chamar outros métodos, criar objetos e realizar qualquer inicialização necessária para que o programa funcione corretamente.
Ele recebe como parâmetro um array de strings que contém os argumentos passados ​​para o programa pela linha de comando, permitindo que o programa interaja com o ambiente externo.

9- Como ocorre a passagem de parâmetros em métodos de uma classe em programação orientada a objetos?

A passagem de parâmetros em métodos de uma classe ocorre por valor. Isso significa que, quando um método é chamado, são passadas cópias dos valores dos parâmetros para os parâmetros do método. 
Portanto, qualquer modificação feita nos parâmetros dentro do método não afeta os valores originais dos argumentos passados. No entanto, para objetos, a cópia do valor é, na verdade, a referência para o objeto. 
Isso significa que, embora a referência em si seja passada por valor, as alterações nos estados do objeto podem ser refletidas fora do método. Isso ocorre porque a referência aponta para o mesmo objeto na memória.

10- Qual é a diferença entre os modificadores de acesso "public", "private" e "protected" em uma classe?

Os modificadores de acesso determinam a visibilidade dos membros (atributos e métodos) de uma classe para outras classes. Aqui está a diferença entre os três modificadores de acesso:
public: Membros marcados como public são acessíveis de qualquer lugar, ou seja, de dentro da classe, de qualquer classe no mesmo pacote e de qualquer classe em pacotes diferentes.
private: Membros marcados como private são acessíveis apenas dentro da própria classe. Eles não podem ser acessados fora da classe, nem mesmo de subclasses.
protected: Membros marcados como protected são acessíveis dentro da própria classe, de qualquer classe no mesmo pacote e de subclasses (mesmo que estejam em pacotes diferentes). No entanto, eles não são acessíveis fora do pacote se a classe não for uma subclasse.
Esses modificadores são fundamentais para controlar o acesso aos membros de uma classe, promovendo encapsulamento e segurança no código.

11-Qual é a importância da palavra-chave "this" em programação orientada a objetos e como ela é utilizada?

A palavra-chave "this" em Java é vital para referenciar a instância atual de uma classe. É usada para distinguir variáveis locais de variáveis de instância, passar a própria 
instância como argumento, chamar construtores da mesma classe e permitir o encadeamento de métodos. 
